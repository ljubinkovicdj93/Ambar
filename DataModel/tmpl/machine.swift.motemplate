// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.swift instead.

import CoreData
<$if hasAdditionalHeaderFile$>import <$additionalHeaderFileName$><$endif$>
<$if hasCustomBaseCaseImport$>import <$baseClassImport$><$endif$>


public extension <$managedObjectClassName$> {
	
	<$if noninheritedAttributes.@count > 0$>
	public struct Attributes {<$foreach Attribute noninheritedAttributes do$>
		static let <$Attribute.name$> = "<$Attribute.name$>"<$endforeach do$>
	}
	<$endif$>

	<$if noninheritedRelationships.@count > 0$>
	public struct Relationships {<$foreach Relationship noninheritedRelationships do$>
		static let <$Relationship.name$> = "<$Relationship.name$>"<$endforeach do$>
	}
	<$endif$>

	<$if noninheritedFetchedProperties.@count > 0$>
	public struct FetchedProperties {<$foreach FetchedProperty noninheritedFetchedProperties do$>
		static let <$FetchedProperty.name$> = "<$FetchedProperty.name$>"<$endforeach do$>
	}
	<$endif$>

	<$if hasUserInfoKeys$>
	public struct UserInfo {<$foreach UserInfo userInfoKeyValues do$>
		static let <$UserInfo.key$> = "<$UserInfo.key$>"<$endforeach do$>
	}
	<$endif$>
	
    // MARK: - Properties
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
<$if Attribute.hasScalarAttributeType$>
<$if Attribute.isReadonly$>
    public var <$Attribute.name$>: <$if Attribute.usesScalarAttributeType$><$Attribute.scalarAttributeType$><$if Attribute.isOptional$> // Optional scalars not supported<$endif$><$else$>NSNumber<$if Attribute.isOptional$>?<$else$>!<$endif$><$endif$>
    {
        self.willAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        let <$Attribute.name$> = self.primitiveValue(forKey: <$sanitizedManagedObjectClassName$>Attributes.<$Attribute.name$>.rawValue) as? <$if Attribute.usesScalarAttributeType$><$Attribute.scalarAttributeType$><$else$>NSNumber<$endif$>
        self.didAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        return <$Attribute.name$>
    }
<$else$>
    @NSManaged public var <$Attribute.name$>: <$if Attribute.usesScalarAttributeType$><$Attribute.scalarAttributeType$><$if Attribute.isOptional$> // Optional scalars not supported<$endif$><$else$>NSNumber<$if Attribute.isOptional$>?<$else$>!<$endif$><$endif$>
<$endif$>
<$else$>
<$if Attribute.isReadonly$>
    public var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$else$>!<$endif$>
    {
        self.willAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        let <$Attribute.name$> = self.primitiveValue(forKey: <$sanitizedManagedObjectClassName$>Attributes.<$Attribute.name$>.rawValue) as? <$Attribute.objectAttributeType$>
        self.didAccessValueForKey(<$managedObjectClassName$>Attributes.<$Attribute.name$>.rawValue)
        return <$Attribute.name$>
    }
<$else$>
    @NSManaged public var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$else$>!<$endif$>
<$endif$>
<$endif$>
<$endif$>
<$endforeach do$>

    // MARK: - Relationships
<$foreach Relationship noninheritedRelationships do$>
<$if Relationship.isToMany$>
    @NSManaged public var <$Relationship.name$>: Set<<$Relationship.destinationEntity.managedObjectClassName$>><$if Relationship.isOptional$>?<$endif$>

<$else$>
    @NSManaged public var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isOptional$>?<$endif$>

<$endif$>
<$endforeach do$>
}
